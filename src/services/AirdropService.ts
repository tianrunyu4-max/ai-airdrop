/**
 * üöÄ Á©∫ÊäïÊúçÂä°
 * ‰ªéÊï∞ÊçÆÂ∫ìËØªÂèñÁà¨Ëô´ÊäìÂèñÁöÑÁ©∫Êäï‰ø°ÊÅØ
 */

import { supabase } from '@/lib/supabase'

export interface Airdrop {
  id: string
  title: string
  description: string
  platform: string
  project_name: string
  type: 'web3' | 'cex'
  category?: string
  reward_min?: number
  reward_max?: number
  reward_description?: string
  difficulty?: 'easy' | 'medium' | 'hard'
  ai_score: number
  steps?: string[]
  url?: string
  status: string
  created_at: string
}

export const AirdropService = {
  /**
   * Ëé∑ÂèñÂæÖÊé®ÈÄÅÁöÑÁ©∫ÊäïÔºàÊåâËØÑÂàÜÊéíÂ∫èÔºâ
   * @param limit Êï∞ÈáèÈôêÂà∂
   * @param type Á±ªÂûãÁ≠õÈÄâÔºà'web3' | 'cex' | 'all'Ôºâ
   */
  async getAirdropsForPush(limit: number = 10, type: 'web3' | 'cex' | 'all' = 'all') {
    try {
      let query = supabase
        .from('airdrops')
        .select('*')
        .eq('status', 'active')
        .gt('ai_score', 7.0) // Âè™Êé®ÈÄÅËØÑÂàÜ >= 7.0 ÁöÑ‰ºòË¥®Á©∫Êäï
        .order('ai_score', { ascending: false })
        .order('priority', { ascending: false })
        .limit(limit)
      
      // Á±ªÂûãÁ≠õÈÄâ
      if (type !== 'all') {
        query = query.eq('type', type)
      }
      
      // ÊéíÈô§ÊúÄËøë12Â∞èÊó∂ÂÜÖÊé®ÈÄÅËøáÁöÑ
      const twelveHoursAgo = new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString()
      query = query.or(`last_pushed_at.is.null,last_pushed_at.lt.${twelveHoursAgo}`)
      
      const { data, error } = await query
      
      if (error) {
        console.error('‚ùå Ëé∑ÂèñÁ©∫ÊäïÂ§±Ë¥•:', error)
        return { success: false, data: [], error: error.message }
      }
      
      return { success: true, data: data || [], error: null }
      
    } catch (error: any) {
      console.error('‚ùå Ëé∑ÂèñÁ©∫ÊäïÂºÇÂ∏∏:', error)
      return { success: false, data: [], error: error.message }
    }
  },

  /**
   * Ê†áËÆ∞Á©∫ÊäïÂ∑≤Êé®ÈÄÅ
   */
  async markAsPushed(airdropId: string) {
    try {
      const { error } = await supabase
        .from('airdrops')
        .update({
          push_count: supabase.rpc('increment_push_count'),
          last_pushed_at: new Date().toISOString()
        })
        .eq('id', airdropId)
      
      if (error) {
        console.error('‚ùå Ê†áËÆ∞Êé®ÈÄÅÂ§±Ë¥•:', error)
      }
    } catch (error) {
      console.error('‚ùå Ê†áËÆ∞Êé®ÈÄÅÂºÇÂ∏∏:', error)
    }
  },

  /**
   * ËÆ∞ÂΩïÊé®ÈÄÅÂéÜÂè≤
   */
  async recordPush(airdropId: string, chatGroupId: string, messageId: string, batchNumber: number) {
    try {
      const { error } = await supabase
        .from('airdrop_pushes')
        .insert({
          airdrop_id: airdropId,
          chat_group_id: chatGroupId,
          message_id: messageId,
          batch_number: batchNumber,
          push_time: new Date().toISOString()
        })
      
      if (error) {
        console.error('‚ùå ËÆ∞ÂΩïÊé®ÈÄÅÂéÜÂè≤Â§±Ë¥•:', error)
      }
    } catch (error) {
      console.error('‚ùå ËÆ∞ÂΩïÊé®ÈÄÅÂéÜÂè≤ÂºÇÂ∏∏:', error)
    }
  },

  /**
   * Ê†ºÂºèÂåñÁ©∫ÊäïÊ∂àÊÅØÂÜÖÂÆπ
   */
  formatAirdropMessage(airdrop: Airdrop): string {
    const stars = '‚≠ê'.repeat(Math.ceil(airdrop.ai_score / 2))
    
    let content = `üöÄ ${airdrop.title}\n\n`
    
    // Â•ñÂä±‰ø°ÊÅØ
    if (airdrop.reward_min && airdrop.reward_max) {
      content += `üíé È¢ÑËÆ°Â•ñÂä±Ôºö${airdrop.reward_min}-${airdrop.reward_max} USDT\n`
    } else if (airdrop.reward_description) {
      content += `üíé Â•ñÂä±Ôºö${airdrop.reward_description}\n`
    }
    
    // AIËØÑÂàÜ
    content += `üéØ AIËØÑÂàÜÔºö${airdrop.ai_score}/10 ${stars}\n`
    
    // Âπ≥Âè∞
    content += `üì± Âπ≥Âè∞Ôºö${airdrop.platform}\n`
    
    // ÂàÜÁ±ª
    if (airdrop.category) {
      content += `üìÇ ÂàÜÁ±ªÔºö${airdrop.category}\n`
    }
    
    // ÈöæÂ∫¶
    if (airdrop.difficulty) {
      const difficultyMap = {
        easy: 'ÁÆÄÂçï ‚úÖ',
        medium: '‰∏≠Á≠â ‚ö°',
        hard: 'Âõ∞Èöæ üî•'
      }
      content += `üìä ÈöæÂ∫¶Ôºö${difficultyMap[airdrop.difficulty]}\n`
    }
    
    // ÊèèËø∞
    if (airdrop.description) {
      content += `\nüìù ${airdrop.description.substring(0, 200)}\n`
    }
    
    // ÂèÇ‰∏éÊ≠•È™§
    if (airdrop.steps && airdrop.steps.length > 0) {
      content += `\n‚úÖ ÂèÇ‰∏éÊ≠•È™§Ôºö\n`
      airdrop.steps.slice(0, 5).forEach((step, index) => {
        content += `${index + 1}. ${step}\n`
      })
    }
    
    // ÈìæÊé•
    if (airdrop.url) {
      content += `\nüîó ${airdrop.url}`
    }
    
    return content
  },

  /**
   * Ëé∑ÂèñÁªüËÆ°‰ø°ÊÅØ
   */
  async getStats() {
    try {
      // ÊÄªÊï∞
      const { count: total } = await supabase
        .from('airdrops')
        .select('*', { count: 'exact', head: true })
      
      // Ê¥ªË∑ÉÁ©∫Êäï
      const { count: active } = await supabase
        .from('airdrops')
        .select('*', { count: 'exact', head: true })
        .eq('status', 'active')
      
      // Â∑≤Êé®ÈÄÅ
      const { count: pushed } = await supabase
        .from('airdrops')
        .select('*', { count: 'exact', head: true })
        .gt('push_count', 0)
      
      // Web3Á©∫Êäï
      const { count: web3 } = await supabase
        .from('airdrops')
        .select('*', { count: 'exact', head: true })
        .eq('type', 'web3')
      
      // ‰∫§ÊòìÊâÄÁ©∫Êäï
      const { count: cex } = await supabase
        .from('airdrops')
        .select('*', { count: 'exact', head: true })
        .eq('type', 'cex')
      
      // Âπ≥ÂùáËØÑÂàÜ
      const { data: avgData } = await supabase
        .from('airdrops')
        .select('ai_score')
      
      const avgScore = avgData && avgData.length > 0
        ? avgData.reduce((sum, a) => sum + a.ai_score, 0) / avgData.length
        : 0
      
      return {
        total: total || 0,
        active: active || 0,
        pushed: pushed || 0,
        web3: web3 || 0,
        cex: cex || 0,
        avgScore: avgScore.toFixed(1)
      }
    } catch (error: any) {
      console.error('‚ùå Ëé∑ÂèñÁªüËÆ°Â§±Ë¥•:', error)
      return {
        total: 0,
        active: 0,
        pushed: 0,
        web3: 0,
        cex: 0,
        avgScore: '0.0'
      }
    }
  }
}

